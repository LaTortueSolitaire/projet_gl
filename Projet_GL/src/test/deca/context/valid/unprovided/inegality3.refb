`> [4, 0] Program
   +> [4, 0] ListDeclClass [List with 0 elements]
   `> [4, 0] Main
      +> [5, 4] ListDeclVar [List with 3 elements]
      |  []> [5, 8] DeclVar
      |  ||  +> [5, 4] Identifier (int)
      |  ||  |  definition: type (builtin), type=int
      |  ||  +> [5, 8] Identifier (x)
      |  ||  |  definition: variable defined at [5, 8], type=int
      |  ||  `> [5, 8] Initialization
      |  ||     `> [5, 12] Int (13)
      |  ||        type: int
      |  []> [6, 8] DeclVar
      |  ||  +> [6, 4] Identifier (int)
      |  ||  |  definition: type (builtin), type=int
      |  ||  +> [6, 8] Identifier (y)
      |  ||  |  definition: variable defined at [6, 8], type=int
      |  ||  `> [6, 8] Initialization
      |  ||     `> [6, 12] Int (6)
      |  ||        type: int
      |  []> [7, 8] DeclVar
      |      +> [7, 4] Identifier (int)
      |      |  definition: type (builtin), type=int
      |      +> [7, 8] Identifier (z)
      |      |  definition: variable defined at [7, 8], type=int
      |      `> [7, 8] Initialization
      |         `> [7, 12] Int (7)
      |            type: int
      `> [8, 4] ListInst [List with 1 elements]
         []> [8, 4] IfThenElse
             +> [8, 8] NotEquals
             |  type: boolean
             |  +> [8, 8] Plus
             |  |  type: int
             |  |  +> [8, 9] Identifier (y)
             |  |  |  definition: variable defined at [6, 8], type=int
             |  |  `> [8, 11] Identifier (z)
             |  |     definition: variable defined at [7, 8], type=int
             |  `> [8, 17] Identifier (x)
             |     definition: variable defined at [5, 8], type=int
             +> [9, 8] ListInst [List with 1 elements]
             |  []> [9, 8] Print
             |      `> [9, 14] ListExpr [List with 1 elements]
             |         []> [9, 14] StringLiteral ("non")
             |             type: string
             `> ListInst [List with 1 elements]
                []> [11, 8] Print
                    `> [11, 14] ListExpr [List with 1 elements]
                       []> [11, 14] StringLiteral ("ok")
                           type: string
