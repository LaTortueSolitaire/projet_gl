parser grammar DecaParser;

options {
    // Default language but name it anyway
    //
    language  = Java;

    // Use a superclass to implement all helper
    // methods, instance variables and overrides
    // of ANTLR default methods, such as error
    // handling.
    //
    superClass = AbstractDecaParser;

    // Use the vocabulary generated by the accompanying
    // lexer. Maven knows how to work out the relationship
    // between the lexer and parser and will build the
    // lexer before the parser. It will also rebuild the
    // parser if the lexer changes.
    //
    tokenVocab = DecaLexer;

}

// which packages should be imported?
@header {
    import fr.ensimag.deca.tree.*;
    import fr.ensimag.deca.tools.SymbolTable;
    import java.io.PrintStream;
    import fr.ensimag.deca.syntax.DecaRecognitionException;
    import fr.ensimag.deca.syntax.*;
    import java.util.regex.*;
    import fr.ensimag.deca.context.ContextualError;
}

@members {
    @Override
    protected AbstractProgram parseProgram() {
        return prog().tree;
    }
    SymbolTable symbolTable = new SymbolTable();
}

/*@rulecatch{
      catch(StackOverflowError e){
      }
}*/

prog returns[AbstractProgram tree]
    : list_classes main EOF {
            assert($list_classes.tree != null);
            assert($main.tree != null);
            $tree = new Program($list_classes.tree, $main.tree);
            setLocation($list_classes.tree, $list_classes.start); // pour afficher ligne et colonne de ListDeclClass
            setLocation($tree, $list_classes.start);
        }
    ;

main returns[AbstractMain tree]
    : /* epsilon */ {
            $tree = new EmptyMain();
        }
    | block {
            assert($block.decls != null);
            assert($block.insts != null);
            $tree = new Main($block.decls, $block.insts);
            setLocation($tree, $block.start);
        }
    ;

block returns[ListDeclVar decls, ListInst insts]
    : OBRACE list_decl list_inst CBRACE {
            assert($list_decl.tree != null);
            assert($list_inst.tree != null);
            $decls = $list_decl.tree;
            $insts = $list_inst.tree;
            setLocation($list_decl.tree, $list_decl.start); //pour afficher ligne et colonne de ListDeclVar
            setLocation($list_inst.tree, $list_inst.start); //pour afficher ligne et colonne de ListInst
        }
    ;

list_decl returns[ListDeclVar tree]
@init   {
            $tree = new ListDeclVar();
        }
    : decl_var_set[$tree]* ;

decl_var_set[ListDeclVar l]
    : type list_decl_var[$l,$type.tree] SEMI
    ;

list_decl_var[ListDeclVar l, AbstractIdentifier t]
    : dv1=decl_var[$t] {
        assert($dv1.tree != null);
        $l.add($dv1.tree);
        } (COMMA dv2=decl_var[$t] {
          assert($dv2.tree != null);
          $l.add($dv2.tree);
        }
      )*
    ;

decl_var[AbstractIdentifier t] returns[AbstractDeclVar tree]
@init   {
          AbstractInitialization initialization = new NoInitialization();
        }
    : i = ident {
        assert($i.tree != null);
        }
      (EQUALS e=expr {
        assert($e.tree != null);
        initialization = new Initialization($e.tree);
      }
      )? {
        $tree = new DeclVar(t, $i.tree, initialization);
        setLocation($i.tree, $i.start); //affichage de la ligne de et de la colonne de la variable
        setLocation($tree, $i.start);
        setLocation(initialization, $i.start);
        }

    ;

list_inst returns[ListInst tree]
@init {
      $tree = new ListInst();
}
    : (inst {
      assert($inst.tree != null);
      $tree.add($inst.tree);
      setLocation($inst.tree, $inst.start);
      setLocation($tree, $inst.start);
        }
      )*
    ;


/* OK */
inst returns[AbstractInst tree]
    : e1=expr SEMI
            {
            assert($e1.tree != null);
            $tree = $e1.tree;
            setLocation($tree, $e1.start);
          }
    | SEMI {
        $tree = new NoOperation();
        }
    | PRINT OPARENT list_expr CPARENT SEMI {
            assert($list_expr.tree != null);
            $tree = new Print(false, $list_expr.tree);
            setLocation($tree, $list_expr.start);
        }
    | PRINTLN OPARENT list_expr CPARENT SEMI {
            assert($list_expr.tree != null);
            $tree = new Println(false, $list_expr.tree);
            setLocation($tree, $list_expr.start);
        }
    | PRINTX OPARENT list_expr CPARENT SEMI {
            assert($list_expr.tree != null);
            $tree = new Print(true, $list_expr.tree);
            setLocation($tree, $list_expr.start);
        }
    | PRINTLNX OPARENT list_expr CPARENT SEMI {
            assert($list_expr.tree != null);
            $tree = new Println(true, $list_expr.tree);
            setLocation($tree, $list_expr.start);
        }
    | if_then_else {
            assert($if_then_else.tree != null);
            $tree = $if_then_else.tree;
            setLocation($tree, $if_then_else.start);
        }
    | WHILE OPARENT condition=expr CPARENT OBRACE body=list_inst CBRACE {
            assert($condition.tree != null);
            assert($body.tree != null);
            $tree = new While($condition.tree, $body.tree);
            setLocation($tree, $condition.start);
        }
    | RETURN expr SEMI {
            assert($expr.tree != null);
            $tree = new Return($expr.tree);
            setLocation($tree, $expr.start);
        }
    ; catch [StackOverflowError e]{
      System.out.println("");
    }

/*OK*/
if_then_else returns[IfThenElse tree]
@init {
  IfThenElse tree2;
  IfThenElse tree3;

}
    : if1=IF OPARENT condition=expr CPARENT OBRACE li_if=list_inst CBRACE {
      $tree = new IfThenElse($condition.tree, $li_if.tree, new ListInst());
          assert($condition.tree != null);
          assert($li_if.tree != null);

        tree2 = $tree;
        }
      (elsif = ELSE IF OPARENT elsif_cond=expr CPARENT OBRACE elsif_li=list_inst CBRACE {
        tree3 = new IfThenElse($elsif_cond.tree, $elsif_li.tree, new ListInst());
        tree2.addElseIfBranch(tree3);
        tree2 = tree3;
        assert($elsif_cond.tree != null);
        assert($elsif_li.tree != null);
        }
      )*
      (else1 = ELSE OBRACE li_else=list_inst CBRACE {
        assert($li_else.tree != null);
       tree2.addElseBranch($li_else.tree);
        }
      )?{
};


list_expr returns[ListExpr tree]
@init   {
        $tree = new ListExpr();
        }
    : (e1=expr{
        assert($e1.tree != null);
        $tree.add($e1.tree);
        setLocation($tree, $e1.start);
        }
       (COMMA e2=expr {
         assert($e2.tree != null);
         $tree.add($e2.tree);
         setLocation($tree, $e2.start);
        }
       )* )?
    ;

expr returns[AbstractExpr tree]
    : assign_expr {
      try{
            assert($assign_expr.tree != null);
            $tree = $assign_expr.tree;
            setLocation($tree, $assign_expr.start);
          }catch(StackOverflowError e){
            throw new InvalidLValue(this, $ctx);
          }
        }
    ;

assign_expr returns[AbstractExpr tree]
    : e=or_expr (
        /* condition: expression e must be a "LVALUE" */ {
         if (! ($e.tree instanceof AbstractLValue)) {
                throw new InvalidLValue(this, $ctx);
            }
        }
        EQUALS e2=assign_expr {
            try{
            assert($e.tree != null);
            assert($e2.tree != null);
            $tree = new Assign((AbstractLValue)$e.tree, $e2.tree);
            setLocation($tree, $e.start);
          }catch(StackOverflowError e){
            throw new InvalidLValue(this, $ctx);
          }
        }
      | /* epsilon */ {
            assert($e.tree != null);
            $tree = $e.tree;
        }
      )
    ;
/* OK*/
or_expr returns[AbstractExpr tree]
   :  e=and_expr {
      try{
            assert($e.tree != null);
            $tree = $e.tree;
            setLocation($tree, $e.start);
            }catch(StackOverflowError e){
              throw new InvalidLValue(this, $ctx);
            }
        }
    | e1=or_expr OR e2=and_expr {
      try{
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new Or($e1.tree, $e2.tree);
            setLocation($tree, $e1.start);
            }catch (StackOverflowError e){
             throw new InvalidLValue(this, $ctx);
           }
       }

    ;

/* OK*/
and_expr returns[AbstractExpr tree]
    : e=eq_neq_expr {
          try{
            assert($e.tree != null);
            $tree = $e.tree;
            setLocation($tree, $e.start);
          } catch (StackOverflowError e){
           throw new InvalidLValue(this, $ctx);
         }
        }
    |  e1=and_expr AND e2=eq_neq_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new And($e1.tree, $e2.tree);
            setLocation($tree, $e1.start);
        }
    ;
/* OK*/
eq_neq_expr returns[AbstractExpr tree]
    : e=inequality_expr {
        try {
            assert($e.tree != null);
            $tree = $e.tree;
            setLocation($tree, $e.start);
          }catch (StackOverflowError e){
           throw new InvalidLValue(this, $ctx);
         }
        }
    | e1=eq_neq_expr EQEQ e2=inequality_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new Equals($e1.tree, $e2.tree);
            setLocation($tree, $e1.start);
        }
    | e1=eq_neq_expr NEQ e2=inequality_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new NotEquals($e1.tree, $e2.tree);
            setLocation($tree, $e1.start);
        }
    ;
/* OK */
inequality_expr returns[AbstractExpr tree]
    : e=sum_expr {
      try {
            assert($e.tree != null);
            $tree = $e.tree;
            setLocation($tree, $e.start);
          }catch (StackOverflowError e){
           throw new InvalidLValue(this, $ctx);
         }
        }
    | e1=inequality_expr LEQ e2=sum_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new LowerOrEqual($e1.tree, $e2.tree);
            setLocation($tree, $e1.start);
        }
    | e1=inequality_expr GEQ e2=sum_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new GreaterOrEqual($e1.tree, $e2.tree);
            setLocation($tree, $e1.start);
        }
    | e1=inequality_expr GT e2=sum_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new Greater($e1.tree, $e2.tree);
            setLocation($tree, $e1.start);
        }
    | e1=inequality_expr LT e2=sum_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new Lower($e1.tree, $e2.tree);
            setLocation($tree, $e1.start);
        }
    | e1=inequality_expr INSTANCEOF type {
            assert($e1.tree != null);
            assert($type.tree != null);
            $tree = new InstanceOf($e1.tree, $type.tree);
            setLocation($tree, $e1.start);
        }
    ;

/*OK*/
sum_expr returns[AbstractExpr tree]
    : e=mult_expr {
      try{
            assert($e.tree != null);
            $tree = $e.tree;
          }catch (StackOverflowError e){
           throw new InvalidLValue(this, $ctx);
         }
        }
    | e1=sum_expr PLUS e2=mult_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            try{
            $tree = new Plus($e1.tree, $e2.tree);
          } catch(StackOverflowError e){
            throw new InvalidLValue(this, $ctx);
          }
            setLocation($tree, $e1.start);
        }
    | e1=sum_expr MINUS e2=mult_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            try{
            $tree = new Minus($e1.tree, $e2.tree);
          } catch(StackOverflowError e){
            throw new InvalidLValue(this, $ctx);
          }
            setLocation($tree, $e1.start);
        }
    ;

/*OK*/
mult_expr returns[AbstractExpr tree]
    : e=unary_expr {
          try{
            assert($e.tree != null);
            $tree = $e.tree;
          } catch (StackOverflowError e){
            throw new InvalidLValue(this, $ctx);
          }
        }
    | e1=mult_expr TIMES e2=unary_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            try{
            $tree = new Multiply($e1.tree, $e2.tree);
          } catch(StackOverflowError e){
            throw new InvalidLValue(this, $ctx);
          }
            setLocation($tree, $e1.start);
        }
    | e1=mult_expr SLASH e2=unary_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new Divide($e1.tree, $e2.tree);
            setLocation($tree, $e1.start);
        }
    | e1=mult_expr PERCENT e2=unary_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new Modulo($e1.tree, $e2.tree);
            setLocation($tree, $e1.start);
        }
    ;

/*OK*/
unary_expr returns[AbstractExpr tree]
    : op=MINUS e=unary_expr {
            assert($e.tree != null);
            $tree = new UnaryMinus($e.tree);
            setLocation($tree, $e.start);
        }
    | op=EXCLAM e=unary_expr {
            assert($e.tree != null);
            $tree = new Not($e.tree);
            setLocation($tree, $e.start);
        }
    | select_expr {
        try{
            assert($select_expr.tree != null);
            $tree = $select_expr.tree;
            setLocation($tree, $select_expr.start);
          }catch (StackOverflowError e){
           throw new InvalidLValue(this, $ctx);
         }
        }
    ;

/* a faire*/
select_expr returns[AbstractExpr tree]
    : e=primary_expr {
            assert($e.tree != null);
            $tree = $e.tree;
            setLocation($tree, $e.start);
        }
    | e1=select_expr DOT i=ident {
          // we matched "e1.i(args)"
            assert($e1.tree != null);
            assert($i.tree != null);
        }
        (o=OPARENT args=list_expr CPARENT {
            assert($args.tree != null);
            $tree = new DotMethod($e1.tree, $i.tree, $args.tree);
            setLocation($tree, $e1.start);
        }
        | /* epsilon */ {
          $tree = new DotSelection($e1.tree, $ident.tree);
          setLocation($tree, $e1.start);
          setLocation($ident.tree, $ident.start);
        }
        )
    ;

primary_expr returns[AbstractExpr tree]
    : ident {
            assert($ident.tree != null);
            $tree = $ident.tree;
            setLocation($tree, $ident.start);
        }
    | m=ident OPARENT args=list_expr CPARENT {
            assert($args.tree != null);
            assert($m.tree != null);
            $tree = new DotMethod(tokenLocation($ident.start), $m.tree, $args.tree);
            setLocation($tree, $ident.start);
            setLocation($ident.tree, $ident.start);
        }
    | OPARENT expr CPARENT {
            assert($expr.tree != null);
            $tree = $expr.tree;
        }
    | READINT OPARENT CPARENT {
        $tree = new ReadInt();
        }
    | READFLOAT OPARENT CPARENT {
      $tree = new ReadFloat();
        }
    | NEW ident OPARENT CPARENT {
            assert($ident.tree != null);
            $tree = new New($ident.tree);
            setLocation($tree, $ident.start);
            setLocation($ident.tree, $ident.start);
        }
    | cast=OPARENT type CPARENT OPARENT expr CPARENT {
            assert($type.tree != null);
            assert($expr.tree != null);
            $tree = new Cast($expr.tree, $type.tree);
            setLocation($tree, $cast);
        }
    | literal {
            assert($literal.tree != null);
            $tree = $literal.tree;
            setLocation($tree, $literal.start);
        }
    ;

type returns[AbstractIdentifier tree]
    : ident {
            assert($ident.tree != null);
            $tree = $ident.tree;
            //setLocation($ident.tree, $ident.start);
            setLocation($tree, $ident.start);
        }
    ;

/* OK sauf this & NUll*/
literal returns[AbstractExpr tree]
    : INT {
    	try {
    		$tree = new IntLiteral(Integer.parseInt($INT.getText()));
    	} catch (NumberFormatException e) {
    		throw new InvalidInt(this, $ctx);
    	}
      catch (StackOverflowError e){
        throw new InvalidLValue(this, $ctx);
      }
        }
    | fd=FLOAT {
    	try {
	    	Pattern p1 = Pattern.compile("0+[xX]0+\\.0+[Pp][\\+-]?0+[Ff]?");
	    	Pattern p2 = Pattern.compile("0+\\.0+[Ff]?");
	    	Pattern p3 = Pattern.compile("0+\\.0+[Ee][\\+-][0-9]+[Ff]?");
	    	Matcher m1 = p1.matcher($fd.getText());
	    	Matcher m2 = p2.matcher($fd.getText());
	    	Matcher m3 = p3.matcher($fd.getText());
//	    	System.out.println("float : " + Float.parseFloat($fd.getText()) + " ,text : " + $fd.getText());
        if (Float.parseFloat($fd.getText()) == 0 && (!m1.find() || m1.group().length() != $fd.getText().length()) && (!m2.find() || m2.group().length() != $fd.getText().length())  && (!m3.find() || m3.group().length() != $fd.getText().length())){
          throw new InvalidFloat(this, $ctx, "Float too near to zero");
        }
        if (Float.isInfinite(Float.parseFloat($fd.getText()))){
          throw new InvalidFloat(this, $ctx, "Float cannot be infinite");
        }
	    	$tree = new FloatLiteral(Float.parseFloat($fd.getText()));

    	} catch (NumberFormatException e) {
    		throw new InvalidFloat(this, $ctx, "Float too large");
    	}

        }
    | STRING {
        $tree = new StringLiteral($STRING.getText());
        }
    | TRUE {
      $tree = new BooleanLiteral(true);
        }
    | FALSE {
      $tree = new BooleanLiteral(false);
        }
    | THIS {
      $tree = new This();
        }
    | NULL {
      $tree = new Null();
        }
    ;

ident returns[AbstractIdentifier tree]
    : IDENT {
        $tree = new Identifier( symbolTable.create($IDENT.getText()));
        }
    ;

/****     Class related rules     ****/

list_classes returns[ListDeclClass tree]

    @init{
      $tree = new ListDeclClass();
    }
    :  (c1=class_decl {
        assert($c1.tree != null);
        $tree.add($c1.tree);
        setLocation($tree, $c1.start);
        }
      )*
    ;

class_decl returns[DeclClass tree]
    : c = CLASS name=ident superclass=class_extension OBRACE class_body CBRACE {
        assert($name.tree != null);
        assert($superclass.tree != null);
        $tree = new DeclClass($ident.tree, $superclass.tree, $class_body.methods, $class_body.fieldsSet);
        setLocation($ident.tree, $ident.start);
        setLocation($superclass.tree, $superclass.start);
        setLocation($tree, $c);
        }
    ;

class_extension returns[AbstractIdentifier tree]
    : ex = EXTENDS ident {
        assert($ident.tree != null);
        $tree = $ident.tree;
        setLocation($tree, $ex);
        }
    | /* epsilon */ {
         $tree = new Identifier(symbolTable.create("Object"));
        }
    ;

//setLocation
class_body returns[ListDeclMethod methods, ListFieldSet fieldsSet]
@init{
  $methods = new ListDeclMethod();
  $fieldsSet = new ListFieldSet();
}
    : (m=decl_method { //déclaration des méthodes
        assert($m.tree != null);
        $methods.add($m.tree);
        }
      | decl_field_set { //déclaration des attributs
        assert($decl_field_set.tree != null);
        $fieldsSet.add($decl_field_set.tree);
      }
      )*
    ;

decl_field_set returns[AbstractFieldSet tree]
    : v=visibility t=type list_decl_field
      SEMI{
        assert($v.tree != null);
        assert($t.tree != null);
        assert($list_decl_field.tree != null);
        $tree = new DeclFieldSet($v.tree, $t.tree, $list_decl_field.tree);
        setLocation($tree, $v.start);
      }
    ;

visibility returns[Visibility tree]
    : /* epsilon */ {
        $tree = Visibility.PUBLIC;
        }
    | PROTECTED {
        $tree = Visibility.PROTECTED;
        }
    ;

list_decl_field returns[ListFields tree]
@init{
  $tree = new ListFields();
}
    : dv1=decl_field{
      assert($dv1.tree != null);
      $tree.add($dv1.tree);
    }
        (COMMA dv2=decl_field{
          assert($dv2.tree != null);
          $tree.add($dv2.tree);
        }
      )*
    ;

decl_field returns[AbstractFields tree]
@init{
  AbstractInitialization initialization = new NoInitialization();
}
    : i=ident{
        assert($ident.tree != null);
      }
      (EQUALS e=expr{
        assert($e.tree != null);
        initialization = new Initialization($e.tree);
      }
      )?{
        $tree = new DeclFields($i.tree, initialization);
        setLocation($tree, $i.start);
        setLocation($i.tree, $i.start);
        setLocation(initialization, $i.start);
      }
    ;

decl_method returns[AbstractDeclMethod tree]
    : type ident OPARENT params=list_params CPARENT (block {
        assert($type.tree != null);
        assert($ident.tree != null);
        assert($params.tree != null);
        assert($block.decls != null);
        assert($block.insts != null);
        $tree= new DeclMethod($type.tree, $ident.tree, $params.tree, $block.decls, $block.insts);
        }
      | ASM OPARENT code=multi_line_string CPARENT SEMI {
        assert($code.text != null);
        assert($code.location != null);
        $tree = new DeclAsmMethod($type.tree, $ident.tree, $params.tree, $code.text);
      }
      ) {
        setLocation($tree, $type.start);
        setLocation($ident.tree, $ident.start);
        }
    ;

list_params returns[ListDeclParam tree]
@init{
  $tree = new ListDeclParam();
}
    : (p1=param {
        assert($p1.tree != null);
        $tree.add($p1.tree);
        setLocation($tree, $p1.start);
        } (COMMA p2=param {
          assert($p2.tree != null);
          $tree.add($p2.tree);
          setLocation($tree, $p1.start);
        }
      )*)?
    ;

multi_line_string returns[String text, Location location]
    : s=STRING {
            $text = $s.text;
            $location = tokenLocation($s);
        }
    | s=MULTI_LINE_STRING {
            $text = $s.text;
            $location = tokenLocation($s);
        }
    ;

param returns[AbstractDeclParam tree]
    : type ident {
        assert($type.tree != null);
        assert($ident.tree != null);
        $tree = new DeclParam($type.tree, $ident.tree);
        setLocation($tree, $type.start);
        setLocation($ident.tree, $ident.start);
        }
    ;
